// <auto-generated />
using System;
using LegacyProcs.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LegacyProcs.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LegacyProcs.Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Changes")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("Sistema");

                    b.HasKey("Id");

                    b.HasIndex("EntityName")
                        .HasDatabaseName("IX_AuditLogs_EntityName");

                    b.HasIndex("Operation")
                        .HasDatabaseName("IX_AuditLogs_Operation");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_AuditLogs_Timestamp");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AuditLogs_UserId");

                    b.HasIndex("EntityName", "EntityId")
                        .HasDatabaseName("IX_AuditLogs_Entity");

                    b.HasIndex("Operation", "Timestamp")
                        .HasDatabaseName("IX_AuditLogs_SensitiveOperations")
                        .HasFilter("[Operation] IN ('DELETE', 'EXPORT', 'ANONYMIZE')");

                    b.HasIndex("Timestamp", "Operation")
                        .HasDatabaseName("IX_AuditLogs_Timestamp_Operation");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("LegacyProcs.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador único do cliente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("CEP do cliente (apenas números)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)")
                        .HasComment("CNPJ da empresa (apenas números)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Cidade do cliente");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2")
                        .HasComment("Data e hora de cadastro do cliente");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Email de contato do cliente");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("Endereço completo do cliente");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasComment("Estado do cliente (sigla UF)");

                    b.Property<string>("NomeFantasia")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Nome fantasia da empresa");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Razão social da empresa");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Telefone de contato (apenas números)");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique()
                        .HasDatabaseName("IX_Cliente_CNPJ_Unique");

                    b.HasIndex("Cidade")
                        .HasDatabaseName("IX_Cliente_Cidade");

                    b.HasIndex("DataCadastro")
                        .HasDatabaseName("IX_Cliente_DataCadastro");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Cliente_Email_Unique");

                    b.HasIndex("Estado")
                        .HasDatabaseName("IX_Cliente_Estado");

                    b.HasIndex("Estado", "Cidade")
                        .HasDatabaseName("IX_Cliente_Estado_Cidade");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("LegacyProcs.Domain.Entities.OrdemServico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador único da ordem de serviço");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime2")
                        .HasComment("Data e hora da última atualização");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2")
                        .HasComment("Data e hora de criação da ordem de serviço");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Descrição detalhada da ordem de serviço");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Status atual da ordem de serviço");

                    b.Property<string>("Tecnico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Nome do técnico responsável");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Título da ordem de serviço");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao")
                        .HasDatabaseName("IX_OrdemServico_DataCriacao");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_OrdemServico_Status");

                    b.HasIndex("Tecnico")
                        .HasDatabaseName("IX_OrdemServico_Tecnico");

                    b.HasIndex("Status", "DataCriacao")
                        .HasDatabaseName("IX_OrdemServico_Status_DataCriacao");

                    b.ToTable("OrdemServico", (string)null);
                });

            modelBuilder.Entity("LegacyProcs.Domain.Entities.Tecnico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador único do técnico");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2")
                        .HasComment("Data e hora de cadastro do técnico");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Email do técnico");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Especialidade técnica do profissional");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Nome completo do técnico");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Status atual do técnico");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Telefone do técnico (apenas números)");

                    b.HasKey("Id");

                    b.HasIndex("DataCadastro")
                        .HasDatabaseName("IX_Tecnico_DataCadastro");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Tecnico_Email_Unique");

                    b.HasIndex("Especialidade")
                        .HasDatabaseName("IX_Tecnico_Especialidade");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Tecnico_Status");

                    b.HasIndex("Status", "Especialidade")
                        .HasDatabaseName("IX_Tecnico_Status_Especialidade");

                    b.ToTable("Tecnico", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
